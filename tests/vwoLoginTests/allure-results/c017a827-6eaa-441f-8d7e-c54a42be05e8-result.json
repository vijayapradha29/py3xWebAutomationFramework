{"name": "test_vwo_login_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=133.0.6943.142)\nStacktrace:\n\tGetHandleVerifier [0x00007FF739E1C6A5+28789]\n\t(No symbol) [0x00007FF739D85B20]\n\t(No symbol) [0x00007FF739C18F9A]\n\t(No symbol) [0x00007FF739C05788]\n\t(No symbol) [0x00007FF739C03F2E]\n\t(No symbol) [0x00007FF739C0477F]\n\t(No symbol) [0x00007FF739C2F97B]\n\t(No symbol) [0x00007FF739C23200]\n\t(No symbol) [0x00007FF739C230A2]\n\t(No symbol) [0x00007FF739BF4A5E]\n\t(No symbol) [0x00007FF739BF29F3]\n\t(No symbol) [0x00007FF739CD7B31]\n\t(No symbol) [0x00007FF739C9732A]\n\t(No symbol) [0x00007FF739CBF7E3]\n\t(No symbol) [0x00007FF739C97103]\n\t(No symbol) [0x00007FF739C5FFC0]\n\t(No symbol) [0x00007FF739C61273]\n\tGetHandleVerifier [0x00007FF73A161AED+3458237]\n\tGetHandleVerifier [0x00007FF73A17829C+3550316]\n\tGetHandleVerifier [0x00007FF73A16DB9D+3507565]\n\tGetHandleVerifier [0x00007FF739EE2C6A+841274]\n\t(No symbol) [0x00007FF739D909EF]\n\t(No symbol) [0x00007FF739D8CB34]\n\t(No symbol) [0x00007FF739D8CCD6]\n\t(No symbol) [0x00007FF739D7C119]\n\tBaseThreadInitThunk [0x00007FFFDBDC259D+29]\n\tRtlUserThreadStart [0x00007FFFDDC4AF38+40]", "trace": "@pytest.fixture()\n    def setup():\n        driver=webdriver.Chrome()\n>       driver.maximize_window()\n\ntest_vwo_login.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\PycharmProjects\\pythonProjectrevision\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:622: in maximize_window\n    self.execute(command, None)\n..\\..\\..\\PycharmProjects\\pythonProjectrevision\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C2346AC3B0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: JavaScript code failed\\\\nfrom un...07FF739D7C119]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFDBDC259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFFDDC4AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nE       from unknown command: 'Runtime.evaluate' wasn't found\nE         (Session info: chrome=133.0.6943.142)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF739E1C6A5+28789]\nE       \t(No symbol) [0x00007FF739D85B20]\nE       \t(No symbol) [0x00007FF739C18F9A]\nE       \t(No symbol) [0x00007FF739C05788]\nE       \t(No symbol) [0x00007FF739C03F2E]\nE       \t(No symbol) [0x00007FF739C0477F]\nE       \t(No symbol) [0x00007FF739C2F97B]\nE       \t(No symbol) [0x00007FF739C23200]\nE       \t(No symbol) [0x00007FF739C230A2]\nE       \t(No symbol) [0x00007FF739BF4A5E]\nE       \t(No symbol) [0x00007FF739BF29F3]\nE       \t(No symbol) [0x00007FF739CD7B31]\nE       \t(No symbol) [0x00007FF739C9732A]\nE       \t(No symbol) [0x00007FF739CBF7E3]\nE       \t(No symbol) [0x00007FF739C97103]\nE       \t(No symbol) [0x00007FF739C5FFC0]\nE       \t(No symbol) [0x00007FF739C61273]\nE       \tGetHandleVerifier [0x00007FF73A161AED+3458237]\nE       \tGetHandleVerifier [0x00007FF73A17829C+3550316]\nE       \tGetHandleVerifier [0x00007FF73A16DB9D+3507565]\nE       \tGetHandleVerifier [0x00007FF739EE2C6A+841274]\nE       \t(No symbol) [0x00007FF739D909EF]\nE       \t(No symbol) [0x00007FF739D8CB34]\nE       \t(No symbol) [0x00007FF739D8CCD6]\nE       \t(No symbol) [0x00007FF739D7C119]\nE       \tBaseThreadInitThunk [0x00007FFFDBDC259D+29]\nE       \tRtlUserThreadStart [0x00007FFFDDC4AF38+40]\n\n..\\..\\..\\PycharmProjects\\pythonProjectrevision\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "start": 1741682337273, "stop": 1741682337273, "uuid": "3ebce45d-a387-4f7d-8d2d-5b10a1995499", "historyId": "99091ff4f3a54bbba7777a96f0a2fe5e", "testCaseId": "99091ff4f3a54bbba7777a96f0a2fe5e", "fullName": "tests.vwoLoginTests.test_vwo_login#test_vwo_login_positive", "labels": [{"name": "epic", "value": "VWO Login Test"}, {"name": "feature", "value": "TC#1 - VWO App Positive Test"}, {"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests.vwoLoginTests"}, {"name": "suite", "value": "test_vwo_login"}, {"name": "host", "value": "LAPTOP-OLURE44J"}, {"name": "thread", "value": "13924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTests.test_vwo_login"}]}